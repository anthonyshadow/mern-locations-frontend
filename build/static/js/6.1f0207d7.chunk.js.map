{"version":3,"sources":["shared/components/UIElements/Card.js","places/pages/UpdatePlace.js"],"names":["Card","props","className","style","children","UpdatePlace","auth","useContext","AuthContext","placeId","useParams","history","useHistory","useState","loadedPlace","setLoadedPlace","useHttpClient","isLoading","error","sendRequest","clearError","useForm","title","value","isValid","description","formState","inputHandler","setFormData","useEffect","process","responseData","place","fetchPlace","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs","Authorization","token","push","userId","overlay","console","log","Fragment","onClear","onSubmit","id","element","type","label","validators","VALIDATOR_REQUIRE","errorText","onInput","initialValue","initialValid","VALIDATOR_MINLENGTH","image","disabled"],"mappings":"qGAAA,0BAYeA,IARF,SAAAC,GACX,OACE,yBAAKC,UAAS,eAAUD,EAAMC,WAAaC,MAAOF,EAAME,OACrDF,EAAMG,Y,2/MCwIEC,UA7HK,WAClB,IAAMC,EAAOC,qBAAWC,KAClBC,EAAUC,cAAYD,QACtBE,EAAUC,cAChB,EAAsCC,qBAAtC,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAsDC,cAA9CC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,MAAOC,EAA1B,EAA0BA,YAAaC,EAAvC,EAAuCA,WAEvC,EAA+CC,YAC7C,CACEC,MAAO,CACLC,MAAO,GACPC,SAAS,GAEXC,YAAa,CACXF,MAAO,GACPC,SAAS,KAGb,GAXF,mBAAOE,EAAP,KAAkBC,EAAlB,KAAgCC,EAAhC,KAcAC,qBAAU,YACQ,uCAAG,6GAEYV,EAAY,GAAD,OACjCW,4BADiC,mBACWrB,IAHlC,OAETsB,EAFS,OAKfhB,EAAegB,EAAaC,OAC5BJ,EACE,CACEN,MAAO,CACLC,MAAOQ,EAAaC,MAAMV,MAC1BE,SAAS,GAEXC,YAAa,CACXF,MAAOQ,EAAaC,MAAMP,YAC1BD,SAAS,KAGb,GAjBa,yGAAH,qDAqBhBS,KACC,CAACd,EAAaV,EAASmB,IAE1B,IAAMM,EAAwB,uCAAG,WAAOC,GAAP,wEAC/BA,EAAMC,iBADyB,kBAGvBjB,EAAY,GAAD,OACZW,4BADY,mBACgCrB,GAC/C,QACA4B,KAAKC,UAAU,CACbhB,MAAOI,EAAUa,OAAOjB,MAAMC,MAC9BE,YAAaC,EAAUa,OAAOd,YAAYF,QAE5C,CACE,eAAgB,mBAChBiB,cAAe,UAAYlC,EAAKmC,QAZP,OAe7B9B,EAAQ+B,KAAK,IAAMpC,EAAKqC,OAAS,WAfJ,uGAAH,sDAmB9B,OAAI1B,EAEA,yBAAKf,UAAU,UACb,kBAAC,IAAD,CAAgB0C,SAAO,KAKxB9B,GAAgBI,GASrB2B,QAAQC,IAAIhC,GAGV,kBAAC,IAAMiC,SAAP,KACE,kBAAC,IAAD,CAAY7B,MAAOA,EAAO8B,QAAS5B,KACjCH,GAAaH,GACb,0BAAMZ,UAAU,aAAa+C,SAAUf,GACrC,kBAAC,IAAD,CACEgB,GAAG,QACHC,QAAQ,QACRC,KAAK,OACLC,MAAM,QACNC,WAAY,CAACC,eACbC,UAAU,8BACVC,QAAS9B,EACT+B,aAAc5C,EAAYQ,MAC1BqC,cAAc,IAEhB,kBAAC,IAAD,CACET,GAAG,cACHC,QAAQ,WACRE,MAAM,cACNC,WAAY,CAACM,YAAoB,IACjCJ,UAAU,wDACVC,QAAS9B,EACT+B,aAAc5C,EAAYW,YAC1BkC,cAAc,IAEhB,kBAAC,IAAD,CACET,GAAG,QACHO,QAAS9B,EACT+B,aAAc5C,EAAY+C,MAC1BF,cAAc,IAEhB,kBAAC,IAAD,CAAQP,KAAK,SAASU,UAAWpC,EAAUF,SAA3C,mBAzCJ,yBAAKtB,UAAU,UACb,kBAAC,IAAD,KACE","file":"static/js/6.1f0207d7.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useEffect, useState, useContext } from \"react\";\nimport { useParams, useHistory } from \"react-router-dom\";\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./PlaceForm.css\";\n\nconst UpdatePlace = () => {\n  const auth = useContext(AuthContext);\n  const placeId = useParams().placeId;\n  const history = useHistory();\n  const [loadedPlace, setLoadedPlace] = useState();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`\n        );\n        setLoadedPlace(responseData.place);\n        setFormData(\n          {\n            title: {\n              value: responseData.place.title,\n              isValid: true,\n            },\n            description: {\n              value: responseData.place.description,\n              isValid: true,\n            },\n          },\n          true\n        );\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  const placeUpdateSubmitHandler = async (event) => {\n    event.preventDefault();\n    try {\n      await sendRequest(\n        `${process.env.REACT_APP_BACKEND_URL}/places/${placeId}`,\n        \"PATCH\",\n        JSON.stringify({\n          title: formState.inputs.title.value,\n          description: formState.inputs.description.value,\n        }),\n        {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + auth.token,\n        }\n      );\n      history.push(\"/\" + auth.userId + \"/places\");\n    } catch (err) {}\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner overlay />\n      </div>\n    );\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  }\n  console.log(loadedPlace);\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedPlace && (\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.title}\n            initialValid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min. 5 characters).\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.description}\n            initialValid={true}\n          />\n          <ImageUpload\n            id=\"image\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.image}\n            initialValid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLACE\n          </Button>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n"],"sourceRoot":""}