{"ast":null,"code":"var _jsxFileName = \"/Users/anthonyshadowitz/Documents/mern-projects/main/src/places/pages/UpdatePlace.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport { VALIDATOR_REQUIRE, VALIDATOR_MINLENGTH } from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport \"./PlaceForm.css\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\n\nconst UpdatePlace = () => {\n  const placeId = useParams().placeId;\n  const [loadedPlace, setLoadedPlace] = useState();\n  const {\n    isLoading,\n    error,\n    sendRequest,\n    clearError\n  } = useHttpClient();\n  const [formState, inputHandler, setFormData] = useForm({\n    title: {\n      value: \"\",\n      isValid: false\n    },\n    description: {\n      value: \"\",\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(`http://localhost:5001/api/places/${placeId}`);\n        setLoadedPlace(responseData.place);\n        setFormData({\n          title: {\n            value: responseData.place.title,\n            isValid: true\n          },\n          description: {\n            value: responseData.place.description,\n            isValid: true\n          }\n        }, true);\n      } catch (err) {}\n    };\n\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]); // useEffect(() => {\n  //   const updatePlace = async () => {\n  //     try {\n  //       const responseData = await sendRequest(\n  //         `http://localhost:5001/api/places/${placeId}`, 'PATCH',\n  //          JSON.stringify({\n  //           title: formState.inputs.title.value,\n  //           description: formState.inputs.description.value,\n  //           address: formState.inputs.address.value,\n  //         }),\n  //       );\n  //       setLoadedPlace(responseData.places)\n  //     } catch (err) {}\n  //   };\n  //   updatePlace();\n  // }, [sendRequest, placeId, formState.inputs.title.value, formState.inputs.description.value, formState.inputs.address.value])\n\n  const placeUpdateSubmitHandler = async event => {\n    event.preventDefault();\n    sendRequest(`http://localhost:5001/api/places/${placeId}`, \"PATCH\", JSON.stringify({\n      title: formState.inputs.title.value,\n      description: formState.inputs.description.value\n    }));\n  };\n\n  if (isLoading) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(LoadingSpinner, {\n      overlay: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  if (!loadedPlace && !error) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"center\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }\n    }, \"Could not find place!\")));\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ErrorModal, {\n    error: error,\n    onClear: clearError,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }\n  }), !isLoading && loadedPlace && /*#__PURE__*/React.createElement(\"form\", {\n    className: \"place-form\",\n    onSubmit: placeUpdateSubmitHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    id: \"title\",\n    element: \"input\",\n    type: \"text\",\n    label: \"Title\",\n    validators: [VALIDATOR_REQUIRE()],\n    errorText: \"Please enter a valid title.\",\n    onInput: inputHandler,\n    initialValue: loadedPlace.title,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    id: \"description\",\n    element: \"textarea\",\n    label: \"Description\",\n    validators: [VALIDATOR_MINLENGTH(5)],\n    errorText: \"Please enter a valid description (min. 5 characters).\",\n    onInput: inputHandler,\n    initialValue: loadedPlace.description,\n    initialValid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    disabled: !formState.isValid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 11\n    }\n  }, \"UPDATE PLACE\")));\n};\n\nexport default UpdatePlace;","map":{"version":3,"names":["React","useEffect","useState","useParams","Input","Button","Card","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","useForm","useHttpClient","LoadingSpinner","ErrorModal","UpdatePlace","placeId","loadedPlace","setLoadedPlace","isLoading","error","sendRequest","clearError","formState","inputHandler","setFormData","title","value","isValid","description","fetchPlace","responseData","place","err","placeUpdateSubmitHandler","event","preventDefault","JSON","stringify","inputs"],"sources":["/Users/anthonyshadowitz/Documents/mern-projects/main/src/places/pages/UpdatePlace.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport Card from \"../../shared/components/UIElements/Card\";\nimport {\n  VALIDATOR_REQUIRE,\n  VALIDATOR_MINLENGTH,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport \"./PlaceForm.css\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\n\nconst UpdatePlace = () => {\n  const placeId = useParams().placeId;\n  const [loadedPlace, setLoadedPlace] = useState();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      title: {\n        value: \"\",\n        isValid: false,\n      },\n      description: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  useEffect(() => {\n    const fetchPlace = async () => {\n      try {\n        const responseData = await sendRequest(\n          `http://localhost:5001/api/places/${placeId}`\n        );\n        setLoadedPlace(responseData.place);\n        setFormData(\n          {\n            title: {\n              value: responseData.place.title,\n              isValid: true,\n            },\n            description: {\n              value: responseData.place.description,\n              isValid: true,\n            },\n          },\n          true\n        );\n      } catch (err) {}\n    };\n    fetchPlace();\n  }, [sendRequest, placeId, setFormData]);\n\n  // useEffect(() => {\n  //   const updatePlace = async () => {\n  //     try {\n  //       const responseData = await sendRequest(\n  //         `http://localhost:5001/api/places/${placeId}`, 'PATCH',\n  //          JSON.stringify({\n  //           title: formState.inputs.title.value,\n  //           description: formState.inputs.description.value,\n  //           address: formState.inputs.address.value,\n  //         }),\n  //       );\n\n  //       setLoadedPlace(responseData.places)\n  //     } catch (err) {}\n  //   };\n  //   updatePlace();\n  // }, [sendRequest, placeId, formState.inputs.title.value, formState.inputs.description.value, formState.inputs.address.value])\n\n  const placeUpdateSubmitHandler = async (event) => {\n    event.preventDefault();\n    sendRequest(\n      `http://localhost:5001/api/places/${placeId}`,\n      \"PATCH\",\n      JSON.stringify({\n        title: formState.inputs.title.value,\n        description: formState.inputs.description.value,\n      })\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"center\">\n        <LoadingSpinner overlay />\n      </div>\n    );\n  }\n\n  if (!loadedPlace && !error) {\n    return (\n      <div className=\"center\">\n        <Card>\n          <h2>Could not find place!</h2>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {!isLoading && loadedPlace && (\n        <form className=\"place-form\" onSubmit={placeUpdateSubmitHandler}>\n          <Input\n            id=\"title\"\n            element=\"input\"\n            type=\"text\"\n            label=\"Title\"\n            validators={[VALIDATOR_REQUIRE()]}\n            errorText=\"Please enter a valid title.\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.title}\n            initialValid={true}\n          />\n          <Input\n            id=\"description\"\n            element=\"textarea\"\n            label=\"Description\"\n            validators={[VALIDATOR_MINLENGTH(5)]}\n            errorText=\"Please enter a valid description (min. 5 characters).\"\n            onInput={inputHandler}\n            initialValue={loadedPlace.description}\n            initialValid={true}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            UPDATE PLACE\n          </Button>\n        </form>\n      )}\n    </React.Fragment>\n  );\n};\n\nexport default UpdatePlace;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}